log4j.rootLogger=debug,console,file,MAIL

### 输出到控制台 ###
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.Threshold=info
log4j.appender.console.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [ %t ] [ %p ]:%L - %m%n

### 输出到日志文件 ###
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.DatePattern=yyyy-MM-dd'.log'
log4j.appender.file.File=/logs/wechat/log-
log4j.appender.file.Append=true
log4j.appender.file.Threshold=info
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [ %t ] [ %p ]:%l - %m%n

#邮件发送
log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender
# 日志的错误级别-只有error才能输出,其他的不能输出
log4j.appender.MAIL.Threshold=ERROR
# 缓存文件大小，日志达到512K时发送Email
log4j.appender.MAIL.BufferSize=1024
# 发送邮件的服务器
log4j.appender.MAIL.SMTPHost=smtp.163.com
# 邮件的标题
log4j.appender.MAIL.Subject=Log4J ErrorMessage
# 用户名
log4j.appender.MAIL.SMTPUsername=18734880533@163.com
# 密码
log4j.appender.MAIL.SMTPPassword=password123
# 发件人地址
log4j.appender.MAIL.From=18734880533@163.com
# 日志邮件的接收者
log4j.appender.MAIL.To=18734880533@163.com
# 日志PatternLayout
log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout
# 日志的格式
log4j.appender.MAIL.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [ %t ] [ %p ]:%l - %m%n


#	Appender为日志输出目的地，Log4j提供的Appender有以下几种：
#	org.apache.log4j.ConsoleAppender(控制台)
#	org.apache.log4j.FileAppender(文件)
#	org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)
#	org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)
#	org.apache.log4j.WriterAppender(将日志信息以流格式发送到目标位置)

#	Layout为日志输出格式，Log4j提供的layout有以下几种：
#	org.apache.log4j.HTMLLayout(以HTML表格形式布局)
#	org.apache.log4j.PatternLayout(可以灵活地指定布局模式)
#	org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串)
#	org.apache.log4j.TTCCLayout(包含日志产生的时间，线程，类别等信息)

#					格式标记符
#	--------------------------------------------------
#		%m		输出代码中指定的信息
#	--------------------------------------------------
#		%p		输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
#	--------------------------------------------------
#		%r		输出自应用启动到输出该log信息耗费的毫秒数
#	--------------------------------------------------
#		%c		输出所属的类目，通常就是所在类的全名
#	--------------------------------------------------
#		%n		输出一个回车换行符
#	--------------------------------------------------
#		%d		输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss}，输出类似：2015-09-06 14:50:12
#	--------------------------------------------------
#		%t		输出产生该日志事件的线程名
#	--------------------------------------------------
#		%l		输出日志事件的发生位置，包括类名，发生的线程以及在代码中的行号
#	--------------------------------------------------
